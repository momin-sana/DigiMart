<<<<<<<<<<<<<<<<DIGIMART>>>>>>>>>>>>>>>>>


package com.student.digimart;

import android.content.res.ColorStateList;
import android.os.Bundle;

import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;

import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.util.Patterns;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.material.shape.MaterialShapeDrawable;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;

import java.util.Objects;

public class SignupFragment extends Fragment {
    private TextView haveAcc;
    private Button signupBtn;
    private TextInputEditText createUsername, email, createPassword, confirmPassword, phoneNo;
    private TextInputLayout emailTextInputLayout, usernameTextInputLayout, passwordTextInputLayout, confirmPasswordTextInputLayout, phoneNoInputLayout;

    public SignupFragment() {
        // Required empty public constructor
    }


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_signup, container, false);

        haveAcc = view.findViewById(R.id.have_acc_tv);
        haveAcc.setOnClickListener(v -> showSignIn());

        createUsername = view.findViewById(R.id.create_username_input_signup);
        email = view.findViewById(R.id.create_email_input_signup);
        createPassword = view.findViewById(R.id.create_password_input_signup);
        confirmPassword = view.findViewById(R.id.confirm_password_input_signup);
        phoneNo = view.findViewById(R.id.enter_phone_no_input_signup);
//
        emailTextInputLayout = view.findViewById(R.id.createEmailTextInputLayout);
        usernameTextInputLayout = view.findViewById(R.id.createUsernameTextInputLayout);
        passwordTextInputLayout = view.findViewById(R.id.createPasswordTextInputLayout);
        confirmPasswordTextInputLayout = view.findViewById(R.id.confirmPasswordTextInputLayout);
        phoneNoInputLayout = view.findViewById(R.id.enterPhoneNoInputLayout);

        String usernameText =createUsername.getText().toString().trim();
        String emailText = email.getText().toString().trim();
        String phoneNoText = phoneNo.getText().toString().trim();
        String passwordText = createPassword.getText().toString().trim();
        String confirmPasswordText = confirmPassword.getText().toString().trim();

        createUsername.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (isValidUsername(String.valueOf(createUsername))){
                    email.setEnabled(true);
                    emailTextInputLayout.setHintTextColor(ColorStateList.valueOf(getResources().getColor(R.color.bright_violet, requireActivity().getTheme())));
                    usernameTextInputLayout.setError(null);
                }

            }

            @Override
            public void afterTextChanged(Editable s) {
                if (s.length() > usernameTextInputLayout.getCounterMaxLength())
                    usernameTextInputLayout.setError(getString(R.string.error_msg_invalid_username));
                else
                    usernameTextInputLayout.setError(null);
            }
        });

        email.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (TextUtils.isEmpty(usernameText)){
                    usernameTextInputLayout.setError(getString(R.string.required_field));
                }
            }

            @Override
            public void afterTextChanged(Editable s) {
                emailTextInputLayout.setError(null);

            }
        });

        phoneNo.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (TextUtils.isEmpty(usernameText)){
                    usernameTextInputLayout.setError(getString(R.string.required_field));
                }if (TextUtils.isEmpty(emailText)){
                    emailTextInputLayout.setError(getString(R.string.required_field));
                }
            }

            @Override
            public void afterTextChanged(Editable s) {
                phoneNoInputLayout.setError(null);
            }
        });

        createPassword.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

                if (TextUtils.isEmpty(usernameText)){
                    usernameTextInputLayout.setError(getString(R.string.required_field));
                }if (TextUtils.isEmpty(emailText)){
                    emailTextInputLayout.setError(getString(R.string.required_field));
                }if (TextUtils.isEmpty(phoneNoText)){
                    phoneNoInputLayout.setError(getString(R.string.required_field));
                }
            }

            @Override
            public void afterTextChanged(Editable s) {
                passwordTextInputLayout.setError(null);
            }
        });

        confirmPassword.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (TextUtils.isEmpty(usernameText)){
                    usernameTextInputLayout.setError(getString(R.string.required_field));
                } else {usernameTextInputLayout.setError(null);}
                if (TextUtils.isEmpty(emailText)){
                    emailTextInputLayout.setError(getString(R.string.required_field));
                }else {emailTextInputLayout.setError(null);}
                if (TextUtils.isEmpty(phoneNoText)){
                    phoneNoInputLayout.setError(getString(R.string.required_field));
                }else {passwordTextInputLayout.setError(null);}
                if (TextUtils.isEmpty(passwordText)){
                    passwordTextInputLayout.setError(getString(R.string.required_field));
                }else {passwordTextInputLayout.setError(null);}
            }

            @Override
            public void afterTextChanged(Editable s) {
                confirmPasswordTextInputLayout.setError(null);
            }
        });


        signupBtn = view.findViewById(R.id.signup_btn);
        signupBtn.setOnClickListener(v -> {
            if (!TextUtils.isEmpty(usernameText) && !TextUtils.isEmpty(emailText) && !TextUtils.isEmpty(passwordText) && !TextUtils.isEmpty(passwordText) && !TextUtils.isEmpty(confirmPasswordText) ){
                if (isValidUsername(usernameText)){
                    if (Patterns.EMAIL_ADDRESS.matcher(emailText).matches()){
                        if (isValidPhoneNumber(phoneNoText)){
                            if (isValidPassword(passwordText)){
                                if (confirmPasswordText.equals(passwordText)){
                                    Toast.makeText(this.getActivity(), "successfully login", Toast.LENGTH_SHORT).show();
                                }else{
                                    confirmPasswordTextInputLayout.setError(getString(R.string.error_msg_invalid_password_matching));
                                }
                            }else{
                                passwordTextInputLayout.setError(getString(R.string.error_msg_invalid_password_created));
                            }
                        }else {
                            phoneNoInputLayout.setError(getString(R.string.error_msg_invalid_phoneNo));
                        }
                    }else{
                        emailTextInputLayout.setError(getString(R.string.error_msg_invalid_email));
                    }
                }else {
                    usernameTextInputLayout.setError(getString(R.string.error_msg_invalid_username));
                }
            }else{
                Toast.makeText(this.getActivity(), "Fields are empty", Toast.LENGTH_SHORT).show();
            }

            //                TODO add data to firebase
        });

        return view;
    }

    private void showSignIn(){
        SigninFragment newFragment = new SigninFragment();
        FragmentTransaction transaction = requireActivity().getSupportFragmentManager().beginTransaction();
        transaction.replace(R.id.fragment_container, newFragment);
        transaction.addToBackStack(null);
        transaction.commit();

    }

    private boolean isValidUsername(String username) {
        String usernameREX ="^[a-zA-Z0-9]{10,15}$";
        return username.matches(usernameREX);
    }
    private boolean isValidPhoneNumber(String phoneNumber) {
        String phoneNoREX ="^\\+92[1-9][0-9]{9}$";
        return phoneNumber.matches(phoneNoREX);
    }
    private boolean isValidPassword(String password) {
        String passwordREX ="^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@#$%^&+=!]).{8,}$";
        return password.matches(passwordREX);
    }
    private boolean isPasswordConfirm(String confirmPass) {
        return confirmPass.matches(String.valueOf(createPassword));
    }


}